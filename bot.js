const TelegramBot = require("node-telegram-bot-api");

const token = "6778485351:AAF3n665bZjMYQTQEVQVqMsu6dyoWIQodYs";

const bot = new TelegramBot(token, { polling: true });

const logo = "./totalBlack.jpeg";

const operatorContact = "https://t.me/Magnetificc";

const handleOperator = async (msg) => {
  const chatId = msg.chat.id;
  const message =
    "‚ùóÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, –±–µ–∑ –º–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤! ‚ùóÔ∏è\n\n —Ñ–µ–π–∫ —Ç–µ–ª–µ–≥—Ä–∞–º (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ)";
  const options = {
    reply_markup: {
      keyboard: [["‚õìÔ∏è –ú–µ–Ω—é ‚õìÔ∏è"]],
      resize_keyboard: true,
    },
  };
  await bot.sendMessage(chatId, message, options);
};

const defaultMurkup = (titleMessage) => {
  const options = {
    caption: titleMessage,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" },
          { text: "‚ö°Ô∏è–ü—Ä–æ—Ñ–∏–ª—å", callback_data: "profile" },
          { text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data: "info" },
        ],
        [
          { text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "purchases" },
          { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: "delivery" },
        ],
        [
          { text: "üî• –†–∞–±–æ—Ç–∞", callback_data: "work" },
          { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: "operator" },
          { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: "ref" },
        ],
        [{ text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≤", callback_data: "balance" }],
      ],
    },
  };
  return options;
};

const handleStart = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const titleMessage =
      "‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω @tootalblackbot ‚ö°Ô∏è\n\n‚ñ™Ô∏è –í –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.\n ‚ñ™Ô∏è –í—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n‚ñ™Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å —Ñ–µ–π–∫–æ–≤.\n‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –æ—Ñ–æ—Ä–º–∏–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É.";
    const options = defaultMurkup(titleMessage);
    console.log(msg);
    await bot
      .sendMessage(chatId, "üíä")
      .then(bot.sendPhoto(chatId, logo, options));
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start:", error.message);
  }
};

function getFormattedTime() {
  const now = new Date();
  const hours = now.getHours().toString().padStart(2, "0");
  const minutes = now.getMinutes().toString().padStart(2, "0");
  const seconds = now.getSeconds().toString().padStart(2, "0");
  const miliseconds = now.getMilliseconds().toString().padStart(3, "0");
  return `${+hours + 1}:${minutes}:${seconds}:${miliseconds}`;
}

const profile = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const time = getFormattedTime();
    const titleMessage = `<strong>‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ‚ö°Ô∏è</strong>\n\nüë§ <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> <code>${msg.chat.first_name}</code>\n‚ï† –õ–æ–≥–∏–Ω: @${msg.chat.username}\n‚ï† ID: <code>${chatId}</code>\n‚ï† –†–µ–π—Ç–∏–Ω–≥: <code>0%</code>\n‚ï† –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∏—Å–ø—É—Ç—ã: <code>0</code>\n‚ïö –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç</code>\n\nüíµ –ë–∞–ª–∞–Ω—Å: <code>0</code> ‚ÇΩ\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${time}`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ profile:", error.message);
  }
};

const info = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è</strong>\n\n‚ñ™Ô∏è –í—Å–µ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n‚ñ™Ô∏è –í—Å–µ –∫–ª–∞–¥—ã –¥–µ–ª–∞—é—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Ö –ø–æ–¥—Ä—ã–≤–∞ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä—Å –º–∞–∂–æ—Ä–∞ (—É–±—Ä–∞–ª–∏ –∑–∞–±–æ—Ä, –ø–µ—Ä–µ–∫–æ–ø–∞–ª–∏ –∑–µ–º–ª—é –∏ —Ç.–¥.).¬†\n\n‚ñ™Ô∏è –¢–æ–≤–∞—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–≤—É—Ö —ç—Ç–∞–ø–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –Ω–∞—à–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏, –∞ –ø–æ—Ç–æ–º –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. –ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω—ã –≤ –≤—ã—Å–æ—á–∞–π—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n\n‚ñ™Ô∏è –†–∞–±–æ—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è.\n\n‚ñ™Ô∏è –ö–ª–∞–¥—ã –¥–µ–ª–∞—é—Ç—Å—è –Ω–∞ –º–∞–≥–Ω–∏—Ç–∞—Ö –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π —á–µ—Ä—Ç–µ, –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç—Ä–æ –∏–ª–∏ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —É–∑–ª–æ–≤. –ó–∞–∫–∞–ø—ã–≤–∞—é—Ç—Å—è –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–µ–ª–∞—é—Ç—Å—è –≤ –ª–µ—Å—É –∏–ª–∏ –ø–∞—Ä–∫–µ.\n\n‚ñ™Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫–∞–∑—ã –Ω–∞ –æ–ø—Ç, –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\nüìë –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ info:", error.message);
  }
};
const purchases = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞... üõí\n\n –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–æ–≤: –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ purchases:", error.message);
  }
};

const delivery = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>üöï –î–æ—Å—Ç–∞–≤–∫–∞ üöï</strong>\n\n‚ñ™Ô∏è –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –≤–∏—Ç—Ä–∏–Ω—ã –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n\n‚ñ™Ô∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É. –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª, –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.\n‚ñ™Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –∫—É—Ä—å–µ—Ä–æ–º. –î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –∏ –∫—É—Ä—å–µ—Ä –æ—Å—Ç–∞–≤–∏—Ç –∫–ª–∞–¥ –≤ —Ä–∞–¥–∏—É—Å–µ 300–º, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–æ–±—â–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ.\n\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:\n‚ñ´Ô∏è –û–±—ã—á–Ω–∞—è ‚Äî 1900 ‚ÇΩ\n‚ïö –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –æ—Ç 4 –¥–æ 12 —á–∞—Å–æ–≤\n‚ñ´Ô∏è –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è ‚Äî 2500 ‚ÇΩ\n‚ïö –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –æ—Ç 1 –¥–æ 2 —á–∞—Å–æ–≤\n‚ñ´Ô∏è –ü—Ä–µ–¥–∑–∞–∫–∞–∑ ‚Äî –æ–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞\n‚ïö –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –¥–æ 36 —á–∞—Å–æ–≤.\n\n‚ñ™Ô∏è –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10000 ‚ÇΩ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ —Å—á–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ delivery:", error.message);
  }
};

const operator = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä üë®‚Äçüíª</strong>\n\n‚ñ™Ô∏è –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ —Å–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ –∂–µ –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥.\n\n‚ñ™Ô∏è –û—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å —Ñ–µ–π–∫–æ–≤, –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–º –∏ –æ—Å—É—â–µ—Ç—Å–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞. (–∞ –Ω–µ —Å –∫–∞–∫–æ–≥–æ-—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞)\n\n<strong>‚ñ™Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:</strong>\n\n‚ñ™Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–µ—Å—É—â–∏–µ —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –ø–æ —Ç–∏–ø—É: "–ø—Ä–∏–≤–µ—Ç", "–º–æ–∂–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å?", "—á—Ç–æ –µ—Å—Ç—å?" –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –º–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n‚ñ™Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —ç–∫—Å—Ç–∞–∑–∏/–º–µ—Ñ–µ–¥—Ä–æ–Ω" –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞, —Ä–∞–π–æ–Ω–∞ –∏ –≤–µ—Å–∞ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ú—ã –Ω–µ –º–æ–∂–µ–º —É–≥–∞–¥–∞—Ç—å —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n\n‚ñ™Ô∏è –ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥. –ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –¶–ê–û, —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ 3–≥ –∫–æ–∫–∞–∏–Ω–∞"\n\n‚ñ™Ô∏è –†–∞–∑–ª–∏—á–Ω—ã–π —Å–ø–∞–º, —Ñ–ª—É–¥ –∏–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –±—É–¥—É—Ç –∫–∞—Ä–∞—Ç—å—Å—è –±–ª–æ–∫—Ä–æ–≤–∫–æ–π –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ operator:", error.message);
  }
};
const ref = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•</strong>\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/tootalblackbot?start=6MME88</code>\n\n‚ñ™Ô∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: 0 ‚ÇΩ\n\n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 25% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞`;
    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ purchases:", error.message);
  }
};
const backMenu = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage =
      "‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω @tootalblackbot ‚ö°Ô∏è\n\n‚ñ™Ô∏è –í –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.\n ‚ñ™Ô∏è –í—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n‚ñ™Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å —Ñ–µ–π–∫–æ–≤.\n‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –æ—Ñ–æ—Ä–º–∏–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É.";

    const options = defaultMurkup();

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ backMenu:", error.message);
  }
};

//–ö–∞—Ç–∞–ª–æ–≥
const catalog = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ—Ä–æ–¥:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üí† –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", callback_data: "archReg" },
            { text: "üí† –ë–∞—Ä–Ω–∞—É–ª", callback_data: "barnReg" },
          ],
          [
            { text: "üí† –ë–µ–ª–≥–æ—Ä–æ–¥", callback_data: "belReg" },
            { text: "üí† –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", callback_data: "wladReg" },
          ],
          [
            { text: "üí† –í–æ—Ä–æ–Ω–µ–∂", callback_data: "voronReg" },
            { text: "üí† –ï–∫–∞—Ç–∏—Ä–∏–Ω–±—É—Ä–≥", callback_data: "ekatReg" },
          ],
          [
            { text: "üí† –ò—Ä–∫—É—Ç—Å–∫", callback_data: "irkReg" },
            { text: "üí† –ö–∞–∑–∞–Ω—å", callback_data: "kazReg" },
          ],
          [
            { text: "üí† –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", callback_data: "krasnoReg" },
            { text: "üí† –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", callback_data: "novReg" },
          ],
          [
            { text: "üí† –û–º—Å–∫", callback_data: "omskReg" },
            { text: "üí† –û—Ä–µ–Ω–±—É—Ä–≥", callback_data: "orenReg" },
          ],
          [
            { text: "üí† –ú–æ—Å–∫–≤–∞", callback_data: "moscReg" },
            { text: "üí† –°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data: "peterReg" },
          ],
          [
            { text: "üí† –°–∞—Ä–∞—Ç–æ–≤", callback_data: "saratReg" },
            { text: "üí† –¢–æ–ª—å—è—Ç—Ç–∏", callback_data: "tolReg" },
          ],
          [
            { text: "üí† –¢–æ–º—Å–∫", callback_data: "tomsReg" },
            { text: "üí† –¢—é–º–µ–Ω—å", callback_data: "tumReg" },
          ],
          [
            { text: "üí† –£–ª—å—è–Ω–æ–≤—Å–∫", callback_data: "ulianReg" },
            { text: "üí† –£—Ñ–∞", callback_data: "ufaReg" },
          ],
          [
            { text: "üí† –•–∞–±–∞—Ä–æ–≤—Å–∫", callback_data: "habarReg" },
            { text: "üí† –Ø—Ä–æ—Å–ª–∞–≤–ª—å", callback_data: "iarosReg" },
          ],
          [
            { text: "üí† –ß–∏—Ç–∞", callback_data: "chitaReg" },
            { text: "üí† –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data: "novosReg" },
          ],
          [
            { text: "üí† –°—É—Ä–≥—É—Ç", callback_data: "surgReg" },
            { text: "üí† –ü–µ—Ä–º—å", callback_data: "permReg" },
          ],
          [
            { text: "üí† –ê–Ω–≥–∞—Ä—Å–∫", callback_data: "angReg" },
            { text: "üí† –°–æ–ª–∏–∫–∞–º—Å–∫", callback_data: "solikReg" },
          ],
          [
            { text: "üí† –ß–µ–ª—è–±–∏–Ω—Å–∫", callback_data: "chelReg" },
            { text: "üí† –ë–∏–π—Å–∫", callback_data: "biyskReg" },
          ],
          [
            { text: "üí† –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data: "krasReg" },
            { text: "üí† –í–æ–ª–≥–æ–≥—Ä–∞–¥", callback_data: "volgReg" },
          ],
          [
            { text: "üí† –õ—É–≥–∞–Ω—Å–∫", callback_data: "luganReg" },
            { text: "üí† –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", callback_data: "novokReg" },
          ],
          [
            { text: "üí† –í–æ–ª–∂—Å–∫–∏–π", callback_data: "volzReg" },
            { text: "üí† –ì–µ–Ω–∏—á–µ—Å–∫", callback_data: "genicReg" },
          ],
          [{ text: "üí† –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å", callback_data: "melitReg" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "backMenu" }],
        ],
      },
    };

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const archReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—Å—å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–µ–≤–µ—Ä–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –¶–∏–≥–ª–æ–º–µ–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–ª–æ–º–±–∞–ª—å—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const barnReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—Å—å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const belReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ì–∏–ø–µ—Ä –õ–µ–Ω—Ç–∞", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¢–†–¶ —Ä–∏–æ", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è —É–ª. –ü–æ–±–µ–¥—ã", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const wladReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const voronReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const ekatReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ß–∫–∞–ª–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const irkReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const kazReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const krasnoReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –í–∑–ª–µ—Ç–∫–∞", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ü–∞–∫—Ä–æ–≤–∫–∞", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –û—Å—Ç—Ä–æ–≤ –¢–∞—Ç—ã—à–µ–≤", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ß–µ—Ä–µ–º—É—à–∫–∏", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const novReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ê–≤—Ç–æ–∑–∞–≤–æ—Ä–¥–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const omskReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const orenReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const moscReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö—Ä—ñ–ª–∞—Ç—Å–∫–æ–µ", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–∫–æ–ª—å–Ω–∏–∫–∏", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –•–æ–≤—Ä–∏–Ω–æ", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const peterReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ü—É—à–∫–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –§—Ä—É–Ω–∑–µ—Ü–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ù–µ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö—É–¥—Ä–æ–≤–æ", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const saratReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ó–∞–≤–æ–¥—Å–∫–æ–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const tolReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–æ–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const tomsReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const tumReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –í–æ–π–Ω–æ–≤–∫–∞", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ú–∞—è–∫", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ç—Ä–∞–∫—Ç", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const ulianReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ó–∞–≤–æ–ª–∂—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ó–∞—Å–≤–∏–π–∂—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const ufaReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –î–µ–º—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const habarReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö—Ä–∞—Å–Ω–æ—Ñ–ª–æ—Ç—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const iarosReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ó–∞–≤–æ–ª–∂—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const chitaReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const novosReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const surgReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –°–µ–≤–µ—Ä–Ω—ã–π –∂–∏–ª–æ–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –∂–∏–ª–æ–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const permReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const angReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 12–ê", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ë–∞–π–∫–∞–ª—å—Å–∫", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ú–∞–π—Å–∫", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const solikReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ë–æ—Ä–æ–≤—Å–∫", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö—Ä–∞—Å–Ω–æ–µ", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –ü–æ—Å–ø–µ–ª–æ–≤–æ", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ù–∏–∂–Ω–∏–π –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const chelReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const biyskReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è 23-–π –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ó–∞—Ä–µ—á—å–µ", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ß–∫–∞–ª–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ó–µ–ª–µ–Ω—ã–π –ö–ª–∏–Ω", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const krasReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ó–∞–ø–∞–¥–Ω—ã–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const volgReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω", callback_data: "drugs" },
            { text: "üõ°Ô∏è –°–æ–≤–µ—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω", callback_data: "drugs" },
          ],
          [
            { text: "üõ°Ô∏è –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const luganReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ê—Ä—Ç—ë–º–æ–≤—Å–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const novokReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –ö—É–∑–Ω–µ—Ü–∫–∏–π", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ù–æ–≤–æ–∏–ª—å–∏–Ω—Å–∫–∏–π", callback_data: "drugs" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const volzReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è 10 –º–∫—Ä", callback_data: "drugs" },
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è 7-–π –ö–≤–∞—Ä—Ç–∞–ª", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const genicReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ê—Ä–∞–±–∞—Ç—Å–∫–∞—è —Å—Ç—Ä–µ–ª–∫–∞", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –ñ–∏–ª–ü–æ—Å–µ–ª–æ–∫", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
const melitReg = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üõ°Ô∏è –¶–µ–Ω—Ç—Ä", callback_data: "drugs" },
            { text: "üõ°Ô∏è –ù–æ–≤—ã–π –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å", callback_data: "drugs" },
          ],
          [{ text: "üõ°Ô∏è –û–∫—Ä–∞–∏–Ω–∞", callback_data: "drugs" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ catalog:", error.message);
  }
};
// drugs
const drugs = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `üí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üîÆ –ì–∞—à–∏—à—å (Euro)", callback_data: "gash" },
            { text: "üîÆ VHQ –ú–µ—Ñ–µ–¥—Ä–æ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª", callback_data: "meph" },
          ],
          [
            { text: "üîÆ [VHQ] –ú–µ—Ç–∞–¥–æ–Ω 98%", callback_data: "meth" },
            { text: "üîÆ [VHQ] –®–∏—à–∫–∏ griega", callback_data: "shish" },
          ],
          [
            { text: "üîÆ xtc –≠–∫—Å—Ç–∞–∑–∏ 380–º–≥", callback_data: "ekz" },
            { text: "üîÆ [VHQ] –ö–æ–∫–∞–∏–Ω –ë–æ–ª–∏–≤–∏—è 99%", callback_data: "cocain" },
          ],
          [
            { text: "üîÆ –ì–∞—à–∏—à—å Lemon", callback_data: "gashL" },
            { text: "üîÆ AlphaPVP Blue", callback_data: "alpha" },
          ],
          [{ text: "üîÆ –ì–µ—Ä–æ–∏–Ω 777 VHQ", callback_data: "ger" }],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "catalog" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const gash = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>–ì–∞—à–∏—à—å (Euro)</strong>\n\nüç≠ [VHQ] –ì–∞—à–∏—à –ï–≤—Ä–æ\nüéâ –ü–æ–∫—É–ø–æ–∫: 4000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.7üî• –û—Ç–∑—ã–≤—ã: 1125\n–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–æ—Ä—Ç –≥–∞—à–∏—à–∞. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏–ª–∏ —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–Ω—è—Ç—å —Å–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–¥ —ç—Ç–∏–º –≥–∞—à–∏—à–µ–º –º–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–±—â–µ—Å—Ç–≤–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–ª—è—Ç–æ—Ä–∞–º. –í–º–µ—Ä—É –ø—Ä–∏—è—Ç–Ω—ã–π –Ω–∞–∫—É—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π, —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ä—Ç –Ω–∞ –Ω–∞—à–µ–π –≤–∏—Ç—Ä–∏–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å —Å–∞–º–æ–≥–æ —É—Ç—Ä–∞. –ú—ã –±—ã –Ω–∞–∑–≤–∞–ª–∏ —ç—Ç–æ—Ç —Å–æ—Ä—Ç - –ª—É—á—à–∏–º —Å–æ—Ä—Ç–æ–º –º–∏–∫—Ä–æ–¥–æ–∑–∏–Ω–≥–∞ –¢–ì–ö.\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 3200 ‚ÇΩ | –ì–∞—à–∏—à—å(Euro)",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const meph = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage =
      "<strong>VHQ –ú–µ—Ñ–µ–¥—Ä–æ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª</strong>\n\nüç≠ [VHQ] –ú–µ—Ñ–µ–¥—Ä–æ–Ω –ö—Ä–∏—Å—Ç–∞–ª–ª\nüéâ –ü–æ–∫—É–ø–æ–∫: 5000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.8üî• –û—Ç–∑—ã–≤—ã: 1155\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ - –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞—Å—Ç–∏ –∏ —ç–π—Ñ–æ—Ä–∏–∏ –ú–µ—Ñ–µ–¥—Ä–æ–Ω¬†–ö—Ä–∏—Å—Ç–∞–ª–ª! –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º¬†—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–≤–æ–π–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –ø—Ä–æ—à–µ–¥—à–∏–π –≤—Å–µ –ø—Ä–æ–±—ã –∏ —Ç–µ—Å—Ç—ã, –Ω–∞—à¬†–º—è—É –∑–∞—Å—Ç–∞–≤–∏—Ç –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –º–æ—Ä–µ —ç–π—Ñ–æ—Ä–∏–∏ –∏ —Ç–µ–ø–ª–∞. –í–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è¬†–ª—é–±–æ–≤—å—é —Å–æ –≤—Å–µ–º–∏, –∫—Ç–æ –≤–∞—Å –æ–∫—Ä—É–∂–∞–µ—Ç, –∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–±–∏–¥–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—Å¬†–ª—É—á—à–∏–º –ª—é–±–æ–≤–Ω–∏–∫–æ–º –≤ –º–∏—Ä–µ! –ú—è–≥–∫–∏–π –≤—Ö–æ–¥, –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –ª–µ–≥—á–∞–π—à–∏–π¬†–≤—ã—Ö–æ–¥ - –≤—Å–µ —ç—Ç–æ –ø—Ä–æ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç! –ë–µ—Ä–µ–∂–µ—Ç –≤–∞—à –Ω–æ—Å –∏ –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ¬†–≥–æ–≤–æ—Ä–∏—Ç –æ –≤—ã—Å–æ–∫–æ–π —á–∏—Å—Ç–æ—Ç–µ –≤–µ—â–µ—Å—Ç–≤–∞. –ù–æ–≤–∏—á–∫–∞–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö¬†–ø–æ—Ä—Ü–∏–π!\n–î–æ–∑–∏—Ä–æ–≤–∫–∏\n–ò–Ω—Ç—Ä–∞–Ω–∞–∑–∞–ª—å–Ω–æ:\n–°—Ä–µ–¥–Ω—è—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞ 100-250 –º–≥.\n–í—Ö–æ–¥ - 2-5 –º–∏–Ω—É—Ç.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è 40-90 –º–∏–Ω—É—Ç\n\n–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ:\n–°—Ä–µ–¥–Ω—è—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞ 200-350 –º–≥.\n–í—Ö–æ–¥ - 20-40 –º–∏–Ω—É—Ç.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è 1-3 —á–∞—Å–∞.\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:";
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 3800 ‚ÇΩ | –ú–µ—Ñ —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 2.0–≥ | 6200 ‚ÇΩ | –ú–µ—Ñ –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const meth = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage =
      "<strong>[VHQ] –ú–µ—Ç–∞–¥–æ–Ω 98%</strong>\n\nüç≠ [VHQ] –ú–µ—Ç–∞–¥–æ–Ω VHQ 99.3%\nüéâ –ü–æ–∫—É–ø–æ–∫: 9000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.9üî• –û—Ç–∑—ã–≤—ã: 3612\n\n–¢–µ–ø–ª—ã–π –∫–æ–ª—é—á–∏–π –ø–ª–µ–¥, –æ–±—ä—è—Ç–∏—è –ª—é–±–∏–º–æ–π –∂–µ–Ω—â–∏–Ω—ã, –∫–∞–ø—Å—É–ª–∞ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è - —Å —á–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —ç—Ç–æ—Ç –∫–æ—Ä–æ–ª—å –æ–ø–∏–∞—Ç–æ–≤!\n\n–ù–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —á–∏—Å—Ç–µ–π—à–∏–π –ú–µ—Ç–∞–¥–æ–Ω, –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —Å¬†–∑–∞–±–æ—Ç–æ–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ –Ω–∞ –Ω–∞—à—É –≤–∏—Ç—Ä–∏–Ω—É. –°–æ–±–ª—é–¥–µ–Ω—ã –≤—Å–µ —Ç–æ–Ω–∫–æ—Å—Ç–∏¬†—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –°—Ç–µ—Ä–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–∞—Å–æ–≤–∫–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è¬†—Ä–∞–±–æ—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –Ω–∞—à –ú–µ—Ç–∞–¥–æ–Ω¬†–∫–∞–∂–¥—ã–π —Ä–∞–∑, –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —ç—Ç–∏–º —Ç–≤–æ—Ä–µ–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–∏.\n\n–ü–†–û–ë–û–í–ê–¢–¨ –° –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨–Æ! —á–∏—Å—Ç–æ—Ç–∞ 99,3%\n\n–î–æ–∑–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å—Ç–æ—Ç—ã¬†–≤–µ—â–µ—Å—Ç–≤–∞ –∏ –í–∞—à–µ–π —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ —Å –¥–∞–Ω–Ω—ã–º¬†–≤–µ—â–µ—Å—Ç–≤–æ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞, –æ–ø—å—è–Ω—è—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Ç¬†–ø—Ä–∏–µ–º–∞ 5–º–≥.\n–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–æ–≤–∞—è –¥–æ–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10-15–º–≥\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:";
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 4200 ‚ÇΩ | –ú–µ—Ç–∞–¥–æ–Ω –ø—Ä–∏–∫–æ–ø",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 2.0–≥ | 6900 ‚ÇΩ | –ú–µ—Ç–∞–¥–æ–Ω –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const shish = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>[VHQ] –®–∏—à–∫–∏ griega</strong>\n\nüç≠ [VHQ] –®–∏—à–∫–∏ Griega\nüéâ –ü–æ–∫—É–ø–æ–∫: 43000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.8üî• –û—Ç–∑—ã–≤—ã: 11906\n–°–æ—Ä—Ç Griega - –±–µ—Ä–µ–∂–Ω–æ –≤—ã—Ä–∞—â–µ–Ω –Ω–∞—à–∏–º–∏ –≥—Ä–æ–≤–µ—Ä–∞–º–∏ –¥–ª—è —Å–∞–º—ã—Ö –Ω–∞—Å—Ç–æ—è—â–∏—Ö¬†–ª—é–±–∏—Ç–µ–ª–µ–π —Å–∞—Ç–∏–≤—ã –∏ –º–æ—â–Ω–æ–≥–æ –Ω–∞–∫—É—Ä–∞.–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¢–ì–ö –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∞–∂ 27%, –∞ –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç —Å–ø–æ—Å–æ–±–µ–Ω –≤—Å–∫—Ä—É–∂–∏—Ç—å –≥–æ–ª–æ–≤—É¬†–¥–∞–∂–µ —Å–∞–º–æ–º—É –ø—Ä–æ–∂–∂–µ–Ω–Ω–æ–º—É –¢–æ–ª–µ. –≠—Ç–æ—Ç —Å–æ—Ä—Ç –∫–æ–Ω–æ–ø–ª–∏ –Ω–æ–≤–∏—á–∫–∞–º —Å–ª–µ–¥—É–µ—Ç¬†–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –æ—Å–æ–±–µ–Ω–Ω–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!\n–°–æ—Ä—Ç —Å—Ç–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–∏–º —Ü–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–∞–º. –ï–≥–æ –∞–∫—Ç–∏–≤–Ω–æ¬†–ø—Ä–æ–ø–∏—Å—ã–≤–∞—é—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å –º–∏–≥—Ä–µ–Ω—è–º–∏, —Å–∏–Ω–¥—Ä–æ–º–æ–º —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏, –ø—Ä–∏¬†–ø–æ—Ç–µ—Ä–µ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏.–®–∏—à–∫–∞ –æ–±–ª–∞–¥–∞–µ—Ç –º–æ—â–Ω—ã–º –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º, –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç¬†–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —á–∞—Å—Ç–æ¬†–Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø—Ä–∏–ª–∏–≤ —ç–π—Ñ–æ—Ä–∏–∏ - –≤—Å–µ –≤–æ–∫—Ä—É–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ—Å–µ–ª—ã–º –∏¬†–∑–∞–≤–ª–µ–∫–∞—é—â–∏–º. –° –Ω–∞—à–µ–π —à–∏—à–∫–æ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å —è—Ä–∫–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –∞ –≤—Å–µ —Ç–≤–æ–∏¬†–ø—Ä–æ–±–ª–µ–º—ã —É–π–¥—É—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –ø–ª–∞–Ω. –¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è)\n–°–∞—Ç–∏–≤–∞ - 80%–ò–Ω–¥–∏–∫–∞ - 20 %–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¢–ì–ö - 27.12%\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 3400 ‚ÇΩ | –®–∏—à–∫–∏ —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 2.0–≥ | 6600 ‚ÇΩ | –®–∏—à–∫–∏ –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const ekz = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>xtc –≠–∫—Å—Ç–∞–∑–∏ 380–º–≥</strong>\n\nüç≠ [VHQ] –≠–∫—Å—Ç–∞–∑–∏ MIX\nüéâ –ü–æ–∫—É–ø–æ–∫: 1000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.9üî• –û—Ç–∑—ã–≤—ã: 435\n–ö—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª —ç–∫—Å—Ç–∞–∑–∏, —Ç–æ—Ç –∑–Ω–∞–µ—Ç, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π¬†–ø–æ—Ö–æ–∂–∏. –ú—ã —Ä–µ—à–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –∏ —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –Ω–∞—à –≠–∫—Å—Ç–∞–∑–∏ –ú–∏–∫—Å.¬†–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã, –º–æ—â–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç,—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ú–î–ú–ê 250-270 –º–≥, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ¬†–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ï–≤—Ä–æ–ø—ã, –ø–æ—Ä–∞–¥—É—é—Ç –∫–∞–∫ –ª—é–±–∏—Ç–µ–ª–µ–π¬†–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –¥—Ä—É–∑—å—è–º–∏, —Ç–∞–∫ –∏ –ø—Ä–æ–∂–∂–µ–Ω–Ω—ã—Ö —Ä–µ–π–≤–µ—Ä–æ–≤! –û—Ç–ª–∏—á–∞—é—Ç—Å—è¬†—Å–∫–æ—Ä–æ—Å—Ç—å—é –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞, —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞.\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 2.0–≥ | 3800 ‚ÇΩ | –≠–∫—Å—Ç–∞–∑–∏ —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 4.0–≥ | 6900 ‚ÇΩ | –≠–∫—Å—Ç–∞–∑–∏ –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const cocain = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `[VHQ] –ö–æ–∫–∞–∏–Ω –ë–æ–ª–∏–≤–∏—è 99%\n\nüç≠ [VHQ] –ö–æ–∫–∞–∏–Ω –ë–æ–ª–∏–≤–∏—è\nüéâ –ü–æ–∫—É–ø–æ–∫: 100+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 5.0üî• –û—Ç–∑—ã–≤—ã: 25\n–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ - Bolivia–ù–∞—Å—Ç–æ—è—â–∏–π –§–∏—à—Å–∫–µ–π–ª, –ø—Ä–∏ –≤–µ—Ä–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –ø–æ–¥–æ–π–¥–µ—Ç –∫–∞–∫ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π, –∞ –º–æ–∂–µ—Ç –∏ —Å —Ç—Ä–µ–º—è –æ–±–æ–∂–∞–µ–º—ã–º–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏–Ω–∫–∞–º–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–æ—Ä–µ—á—å –≤–æ –≤–∫—É—Å–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –¥–æ–ª–≥–æ.–≠—Ñ—Ñ–µ–∫—Ç—ã:‚Ä¢ –°—Ç–∏–º—É–ª—è—Ü–∏—è‚Ä¢ –≠–π—Ñ–æ—Ä–∏—è‚Ä¢ –ü—Ä–∏–ª–∏–≤ —Å–∏–ª‚Ä¢ –£—Å–∏–ª–µ–Ω–∏–µ —É–º—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤–æ —Å–Ω–µ –∏ –µ–¥–µ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:‚Ä¢ –¶–≤–µ—Ç - –ë–µ–ª—ã–π‚Ä¢ –í–∫—É—Å - –ì–æ—Ä—å–∫–æ–≤–∞—Ç—ã–π, —Å –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–Ω–µ–º–µ–Ω–∏–µ–º‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–º–Ω—è ‚Äì –•–ª–æ–ø—å–µ–≤–∏–¥–Ω–∞—è‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–¥–ª–∏—Ç—Å—è –æ—Ç 20 –¥–æ 40 –º–∏–Ω—É—Ç.–î–æ–∑–∏—Ä–æ–≤–∫–∞: –ù–∞–∑–∞–ª—å–Ω–æ - 30-60 –º–≥. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 3-5 –º–∏–Ω—É—Ç.\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 0.5–≥ | 6900 ‚ÇΩ | –ö–æ–∫–∞–∏–Ω –ø—Ä–∏–∫–æ–ø",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 1.0–≥ | 14800 ‚ÇΩ | –ö–æ–∫–∞–∏–Ω –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 2.0–≥ | 23899 ‚ÇΩ | –ù–∞–¥–µ–∂–Ω—ã–π —Ç–∞–π–Ω–∏–∫!",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const gashL = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `–ì–∞—à–∏—à—å Lemon\n\nüç≠ [VHQ] –ì–∞—à–∏—à Lemon Ice-o-lator\nüéâ –ü–æ–∫—É–ø–æ–∫: 20000+‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 4.8üî• –û—Ç–∑—ã–≤—ã: 5514\n–í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤–∏–Ω–∫—É —Ä—ã–Ω–∫–∞ - ICE-O-LATOR LEMON. –°–æ–∑–¥–∞–Ω –ø–æ —Å—Ç–∞—Ä–æ–π –¥–æ–±—Ä–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ª–µ–¥—è–Ω–æ–π —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–µ–π—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å—ã—Ä—å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–∞—à–∏—à–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–æ—Ä—Ç–∞ Lemon Haze. –û—Ç—Ç–µ–Ω–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –∞—Ä–æ–º–∞—Ç –ª–∏–º–æ–Ω–∞ - –ø—Ä–æ–±—å—ë—Ç –ª—é–±–æ–π –æ—Å–µ–Ω–Ω–∏–π –Ω–∞—Å–º–æ—Ä–∫. –ú—è–≥–∫–∏–π, –ª–∏–ø–∫–∏–π, –ø–ª–∞–≤–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ —Ä—É–∫–∞—Ö, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º —Å—ã—Ä—å–µ. –ü–µ—Ä–µ–¥ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ –≤ –º–æ—Ä–æ–∑–∏–ª–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ª—è–ø–∫–∏ –≤—Å—ë —Ç–µ–ª–æ –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ —Ç—ë–ø–ª—ã–µ –≤–æ–ª–Ω—ã —Ä–µ–ª–∞–∫—Å–∞. –û—Å—Ç–∞—ë—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–µ–¥–∏—é –∏ –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞–π. –ì–∞—à–∏—à —Å–≤–µ–∂–∏–π, –ø–∞—Ä—Ç–∏—è —ç—Ç–æ–≥–æ –≥–æ–¥–∞!\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 3400 ‚ÇΩ | –≠–∫—Å—Ç–∞–∑–∏ —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 2.0–≥ | 5700 ‚ÇΩ | –≠–∫—Å—Ç–∞–∑–∏ –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const alpha = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `AlphaPVP Blue\n\n\n\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 1.0–≥ | 3400 ‚ÇΩ | –ê–ª—å—Ñ–∞ —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};
const ger = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `–ì–µ—Ä–æ–∏–Ω 777 VHQ\n\n\n\n\nüí† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é:`;
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "ü™Ñ 0.5–≥ | 3700 ‚ÇΩ | –ì–µ—Ä–æ–∏–Ω —Ç–∞–π–Ω–∏–∫",
              url: operatorContact,
            },
          ],
          [
            {
              text: "ü™Ñ 1.0–≥ | 5800 ‚ÇΩ | –ì–µ—Ä–æ–∏–Ω –º–∞–≥–Ω–∏—Çüß≤",
              url: operatorContact,
            },
          ],
          [
            { text: "üîô –ù–∞–∑–∞–¥", callback_data: "drugs" },
            { text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "backMenu" },
          ],
        ],
      },
    };
    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ drugs:", error.message);
  }
};

// –†–æ–±–æ—Ç–∞
const workerMurkup = () => {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üèÉ –ö—É—Ä—å–µ—Ä", callback_data: "deliveryMan" },
          { text: "üñºÔ∏è –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: "stenciller" },
          { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: "deliveryCar" },
        ],
        [
          { text: "üìÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: "verify" },
          { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: "operatorWork" },
        ],
        [{ text: "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url: `${operatorContact}` }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "backMenu" }],
      ],
    },
  };
  return options;
};
const work = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞... üõí\n\n –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–æ–≤: –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
const deliveryMan = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä üèÉ‚Äç‚ôÇÔ∏è\n\n–ù–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ç–∞–∫ –∏ –ª—é–¥–∏ –±–µ–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã.\n–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã? –ß–µ–º –º—ã –ª—É—á—à–µ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π? –ß—Ç–æ –∂–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º? –î–∞–≤–∞–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É:\n\n‚ñ™Ô∏è –ú—ã –ø–ª–∞—Ç–∏–º –∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∞–¥–∞.\n‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ—Ç –∂–µ –¥–µ–Ω—å.\n‚ñ™Ô∏è –ü—Ä–µ–º–∏–∏, –±–æ–Ω—É—Å—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ.\n‚ñ™Ô∏è –û–±–ª–∞–¥–∞–µ–º –æ–≥—Ä–æ–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Å–æ —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ –ø—è—Ç–∏ –ª–µ—Ç.\n‚ñ™Ô∏è –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.\n‚ñ™Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤–ø–ª–æ—Ç—å –¥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 3000 ‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\nüë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
const stenciller = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üñº –¢—Ä–∞—Ñ—Ñ–∞—Ä–µ—Ç—á–∏–∫ üñº\n\n–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —Ä–∏—Å—É–Ω–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ –º–µ—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ NoteCam\n\n‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ 140 ‚ÇΩ/–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏.\n‚ñ™Ô∏è –í—ã–ø–ª–∞—Ç–∞ –æ—Ç 20 –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏.\n‚ñ™Ô∏è –¢–µ–∫—Å—Ç –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –≤—ã–¥–∞—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n‚ñ™Ô∏è –ß–µ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∞—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ, –∑–∞ –∫—Ä–∞—Å–∫—É –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤–º–µ—Å—Ç–µ —Å –ó–ü.\n‚ñ™Ô∏è –ù–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ –¥–æ 2—Ö —Ä–∏—Å—É–Ω–∫–æ–≤. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º ‚Äî 50–º.\n‚ñ™Ô∏è –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∑–∞–±—Ä–æ—à–∫–∞—Ö, –º–∞–ª–æ–ø—Ä–æ—Ö–æ–¥–∏–º—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n‚ñ™Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö, –º–Ω–æ–≥–æ—ç—Ç–∞–∂–∫–∞—Ö, –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –∫—É–ø–∏—Ç–µ –±–∞–ª–ª–æ–Ω —Å –∫—Ä–∞—Å–∫–æ–π\n\nüë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
const deliveryCar = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üöõ –í–æ–¥–∏—Ç–µ–ª—å üöõ\n\n–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, —Ä–µ–π—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –ó–ü –æ—Ç 1000$ –∑–∞ —Ä–µ–π—Å, —Ä–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º –≤–µ—Å–æ–º.\n\n–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–µ–≤–æ–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞(—Ö–∏–º. —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏).\n\n‚ñ™Ô∏è –í—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (–ì–°–ú, –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏).\n‚ñ™Ô∏è –û–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞, –∫–æ–≥–¥–∞ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç, –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Ç–∞–∫ –∂–µ –≤–æ–∑–º–µ—â–∞—é—Ç –≤ –ó–ü.\n‚ñ™Ô∏è –í—ã–ø–ª–∞—Ç—ã –Ω–∞ –±–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫, –µ—Å–ª–∏ –Ω–µ —É–º–µ–µ—Ç–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–º—É –æ–±—É—á–∞—Ç, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞.\n‚ñ™Ô∏è –ü–æ—Å–ª–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ä–∞–±–æ—Ç–µ –∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —á—Ç–æ –∏ –∫–∞–∫ –¥–µ–ª–∞—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å + –±—É–¥–µ—Ç –æ–¥–∏–Ω —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–π—Å –ø–æ –º–µ—Å—Ç—É (–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π).\n\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 60000 ‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\nüë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
const verify = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è üì∞\n\n–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö\n\n‚ñ™Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç 2—Ö –∑–∞–¥–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n‚ñ™Ô∏è –í—ã–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —Å–µ—Ä–≤–∏—Å–æ–º. 2 –∑–∞–¥–∞–Ω–∏—è = 2000 ‚ÇΩ.\n‚ñ™Ô∏è –û–ø–ª–∞—Ç—É –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–ª–æ–≥ –¥–ª—è –¥—Ä—É–≥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–π—Ç–∏ (https://telegra.ph/file/52e526bf246fbd07eb5e5.png)\n\nüë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
const operatorWork = async (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const titleMessage = `üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä üë®‚Äçüíª\n\n–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø—Ä–∏–µ–º –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –≤—ã–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–≤.\n\n‚ñ™Ô∏è –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ —Å–µ–±–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (5/2, 2/2 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ).\n‚ñ™Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å - 4 —á–∞—Å–∞. –ù–æ –Ω–µ –º–µ–Ω–µ–µ 30—á –≤ –Ω–µ–¥–µ–ª—é.\n‚ñ™Ô∏è –ó–ü —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç % –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ + –ø—Ä–µ–º–∏–∏ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º.\n‚ñ™Ô∏è % –æ—Ç –ø—Ä–æ–¥–∞–∂ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫. –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è 5%, –Ω–æ—á–Ω–æ–µ 10%.\n‚ñ™Ô∏è –†–∞–±–æ—Ç–∞ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–∞—è. –ù–µ–æ–±—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è, –±–µ–∑ –¥–æ–ø—É—â–µ–Ω–∏—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.\n\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 5000 ‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\nüë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –ø–µ—Ä–µ–π—Ç–∏ ${operatorContact}`;
  const options = workerMurkup();
  try {
    bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ work:", error.message);
  }
};
//–ë–∞–ª–∞–Ω—Å
const balance = async (msg) => {
  try {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const titleMessage = `<strong>üí≥ –í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:</strong>`;
    const options = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "ü•ù QIWI/üí≥ CARD", url: `${operatorContact}` }],
          [{ text: "üßÖ ONION", url: `${operatorContact}` }],
          [{ text: "üåë CRYPTO", url: `${operatorContact}` }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "backMenu" }],
        ],
      },
    };

    await bot.editMessageCaption(titleMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: options.reply_markup,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ balance:", error.message);
  }
};

const commands = {
  start: /\/start/,
  operator: /\/operator/,
};

const handlers = {
  start: handleStart,
  operator: handleOperator,
};

bot.onText(/\/(.+)/, async (msg, match) => {
  const command = match[1];
  if (command in handlers) {
    await handlers[command](msg);
  } else {
    console.log("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: " + command);
  }
});

bot.onText(/‚õìÔ∏è –ú–µ–Ω—é ‚õìÔ∏è/, async (msg) => {
  handleStart(msg);
});

const tempo_operations = {
  catalog: (msg) => {
    catalog(msg);
    console.log("catalog");
  },
  profile: (msg) => {
    profile(msg);
    console.log("profile");
  },
  info: (msg) => {
    info(msg);
    console.log("info");
  },
  purchases: (msg) => {
    purchases(msg);
    console.log("purchases");
  },
  delivery: (msg) => {
    delivery(msg);
    console.log("delivery");
  },
  work: (msg) => {
    work(msg);
    console.log("work");
  },
  operator: (msg) => {
    operator(msg);
    console.log("operator");
  },
  ref: (msg) => {
    ref(msg);
    console.log("ref");
  },
  balance: (msg) => {
    balance(msg);
    console.log("balance");
  },
  backMenu: (msg) => {
    backMenu(msg);
    console.log("backMenu");
  },
  deliveryMan: (msg) => {
    deliveryMan(msg);
    console.log("deliveryMan");
  },
  stenciller: (msg) => {
    stenciller(msg);
    console.log("stenciller");
  },
  deliveryCar: (msg) => {
    deliveryCar(msg);
    console.log("deliveryCar");
  },
  verify: (msg) => {
    verify(msg);
    console.log("verify");
  },
  operatorWork: (msg) => {
    operatorWork(msg);
    console.log("operatorWork");
  },
  archReg: (msg) => {
    archReg(msg);
    console.log("archReg");
  },
  barnReg: (msg) => {
    barnReg(msg);
    console.log("barnReg");
  },
  belReg: (msg) => {
    belReg(msg);
    console.log("belReg");
  },
  wladReg: (msg) => {
    wladReg(msg);
    console.log("wladReg");
  },
  voronReg: (msg) => {
    voronReg(msg);
    console.log("voronReg");
  },
  ekatReg: (msg) => {
    ekatReg(msg);
    console.log("ekatReg");
  },
  irkReg: (msg) => {
    irkReg(msg);
    console.log("irkReg");
  },
  kazReg: (msg) => {
    kazReg(msg);
    console.log("kazReg");
  },
  krasnoReg: (msg) => {
    krasnoReg(msg);
    console.log("krasnoReg");
  },
  novReg: (msg) => {
    novReg(msg);
    console.log("novReg");
  },
  omskReg: (msg) => {
    omskReg(msg);
    console.log("omskReg");
  },
  orenReg: (msg) => {
    orenReg(msg);
    console.log("orenReg");
  },
  moscReg: (msg) => {
    moscReg(msg);
    console.log("moscReg");
  },
  peterReg: (msg) => {
    peterReg(msg);
    console.log("peterReg");
  },
  saratReg: (msg) => {
    saratReg(msg);
    console.log("saratReg");
  },
  tolReg: (msg) => {
    tolReg(msg);
    console.log("tolReg");
  },
  tomsReg: (msg) => {
    tomsReg(msg);
    console.log("tomsReg");
  },
  tumReg: (msg) => {
    tumReg(msg);
    console.log("tumReg");
  },
  ulianReg: (msg) => {
    ulianReg(msg);
    console.log("ulianReg");
  },
  ufaReg: (msg) => {
    ufaReg(msg);
    console.log("ufaReg");
  },
  habarReg: (msg) => {
    habarReg(msg);
    console.log("habarReg");
  },
  iarosReg: (msg) => {
    iarosReg(msg);
    console.log("iarosReg");
  },
  chitaReg: (msg) => {
    chitaReg(msg);
    console.log("chitaReg");
  },
  novosReg: (msg) => {
    novosReg(msg);
    console.log("novosReg");
  },
  surgReg: (msg) => {
    surgReg(msg);
    console.log("surgReg");
  },
  permReg: (msg) => {
    permReg(msg);
    console.log("permReg");
  },
  angReg: (msg) => {
    angReg(msg);
    console.log("angReg");
  },
  solikReg: (msg) => {
    solikReg(msg);
    console.log("solikReg");
  },
  chelReg: (msg) => {
    chelReg(msg);
    console.log("chelReg");
  },
  biyskReg: (msg) => {
    biyskReg(msg);
    console.log("biyskReg");
  },
  krasReg: (msg) => {
    krasReg(msg);
    console.log("krasReg");
  },
  volgReg: (msg) => {
    volgReg(msg);
    console.log("volgReg");
  },
  luganReg: (msg) => {
    luganReg(msg);
    console.log("luganReg");
  },
  novokReg: (msg) => {
    novokReg(msg);
    console.log("novokReg");
  },
  volzReg: (msg) => {
    volzReg(msg);
    console.log("volzReg");
  },
  genicReg: (msg) => {
    genicReg(msg);
    console.log("genicReg");
  },
  melitReg: (msg) => {
    melitReg(msg);
    console.log("melitReg");
  },
  drugs: (msg) => {
    drugs(msg);
    console.log("drugs");
  },
  gash: (msg) => {
    gash(msg);
    console.log("gash");
  },
  meph: (msg) => {
    meph(msg);
    console.log("meph");
  },
  meth: (msg) => {
    meth(msg);
    console.log("meth");
  },
  shish: (msg) => {
    shish(msg);
    console.log("shish");
  },
  ekz: (msg) => {
    ekz(msg);
    console.log("ekz");
  },
  cocain: (msg) => {
    cocain(msg);
    console.log("cocain");
  },
  gashL: (msg) => {
    gashL(msg);
    console.log("gashL");
  },
  alpha: (msg) => {
    alpha(msg);
    console.log("alpha");
  },
  ger: (msg) => {
    ger(msg);
    console.log("ger");
  },
};

handleCallbackQuery = async (query) => {
  const msg = query.message;
  await bot.answerCallbackQuery(query.id);
  if (query.data in tempo_operations) {
    tempo_operations[query.data](msg, query);
  } else {
    console.log("–ù–µ–≤—ñ–¥–æ–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è query.data: " + query.data);
  }
};

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ on –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
bot.on("callback_query", handleCallbackQuery);
